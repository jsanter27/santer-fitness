{"version":3,"sources":["services/serviceWorker.js","services/authService.js","constants/Colors.js","components/SFLoading.js","context/AuthContext.js","hocs/PrivateRoute.js","hocs/UnPrivateRoute.js","components/SFNavbar.js","components/SFFooter.js","components/SFCard.js","components/SFAlert.js","components/SFError.js","components/HomeScreen.js","components/ScheduleScreen.js","services/apiService.js","components/SFModal.js","components/SFForm.js","components/MembershipsScreen.js","components/AdminLoginScreen.js","components/AdminHomeScreen.js","components/AdminScheduleScreen.js","components/AdminForgotPasswordScreen.js","components/AdminChangePasswordScreen.js","index.js"],"names":["Boolean","window","location","hostname","match","getResponse","res","data","catchErrors","err","response","status","isAuthenticated","user","username","message","msgBody","msgError","axios","post","then","catch","get","resetPasswordToken","password","LIGHT","SFLoading","Container","Row","className","color","size","AuthContext","createContext","children","useState","setUser","setIsAuthenticated","isLoaded","setIsLoaded","useEffect","auth","result","Provider","value","PrivateRoute","Component","component","rest","useContext","render","props","to","pathname","state","from","UnPrivateRoute","SFNavbar","expanded","setExpanded","history","useHistory","goToHome","admin","push","Navbar","bg","variant","expand","Col","xs","Brand","Image","src","alt","rounded","onClick","Toggle","Collapse","Nav","style","width","Link","disabled","href","SFFooter","id","ListGroup","Item","marginBottom","url","SFCard","Icon","icon","title","items","Card","Header","renderIcon","Body","Title","renderTitle","map","item","index","key","renderItems","SFAlert","isEmergency","Alert","SFError","error","GET_HOME","gql","HomeScreen","useQuery","loading","getAllAlerts","filter","alert","isActive","getAllSlides","Carousel","slide","padding","textAlign","Button","block","open","sm","paddingBottom","FaRunning","GiMeditation","GiWeightLiftingUp","GET_SCHEDULE","ScheduleScreen","getSchedule","getAllEvents","event","paddingTop","name","instructors","i","length","getInstructorString","description","SFModal","Modal","show","onHide","closeButton","trim","SFForm","firstName","lastName","email","phone","form","setForm","setShow","setMessage","handleChange","target","isDisabled","test","Form","onSubmit","preventDefault","api","Group","controlId","Label","Control","type","placeholder","onChange","Text","MembershipsScreen","AdminLoginScreen","userInput","setUserInput","modal","setModal","btnDisabled","AdminHomeScreen","refetch","margin","marginTop","idx","lastModifiedBy","thumbnail","files","file","formData","FormData","append","File","checked","handleUpdateAlert","_id","as","rows","defaultValue","Check","label","defaultChecked","inline","AdminScheduleScreen","getInstructorList","split","inst","handleUpdateEvent","AdminForgotPasswordScreen","AdminChangePasswordScreen","confirmPassword","token","useParams","client","ApolloClient","uri","ReactDOM","exact","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.23ff2f90.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\r\n\r\nconst getResponse = (res) => {\r\n    return res.data;\r\n}\r\n\r\nconst catchErrors = (err) => {\r\n    if (!err){\r\n        return;\r\n    }\r\n    if (err.response.status !== 401){\r\n        return err.response.data;\r\n    }\r\n    else {\r\n        return { isAuthenticated : false, user : { username : \"\" }, message : { msgBody: \"Incorrect Username or password\", msgError: true } };\r\n    }\r\n}\r\n\r\nexport default {\r\n    login : user => {\r\n        /* return fetch('/users/login', {\r\n            method : \"post\",\r\n            body : JSON.stringify(user),\r\n            headers : {\r\n                'Content-Type' : 'application/json'\r\n            }\r\n        }).then(res => {\r\n            if (res.status !== 401){\r\n                return res.json().then(data => {\r\n                    return data;\r\n                });\r\n            }\r\n            else{\r\n                return { isAuthenticated : false, user : { username : \"\" } };\r\n            }\r\n        }); */\r\n        return axios.post('/users/login', user).then(getResponse).catch(catchErrors);\r\n    },\r\n    /* register : user => {\r\n        return fetch('/users/register', {\r\n            method : \"post\",\r\n            body : JSON.stringify(user),\r\n            headers : {\r\n                'Content-Type' : 'application/json'\r\n            }\r\n        }).then(res => {\r\n            if (res.status !== 401){\r\n                return res.json().then(data => {\r\n                    return data;\r\n                });\r\n            }\r\n            else{\r\n                return { isAuthenticated : false, user : { username : \"\" } };\r\n            }\r\n        });\r\n        return axios.post('/users/register', user).then(getResponse).catch(catchErrors);\r\n    }, */\r\n    forgotPassword : user => {\r\n        /* return fetch('/users/forgot', {\r\n            method : \"post\",\r\n            body : JSON.stringify(user),\r\n            headers : {\r\n                'Content-Type' : 'application/json'\r\n            }\r\n        }).then(res => {\r\n            if (res.status !== 401){\r\n                return res.json().then(data => {\r\n                    return data;\r\n                });\r\n            }\r\n            else{\r\n                return { isAuthenticated : false, user : { username : \"\" } };\r\n            }\r\n        }); */\r\n        return axios.post('/users/forgot', user).then(getResponse).catch(catchErrors);\r\n    },\r\n    logout : () => {\r\n        /* return fetch('/users/logout').then(res => res.json()).then(data => data); */\r\n        return axios.get('/users/logout').then(getResponse).catch(catchErrors);\r\n    },\r\n    isAuthenticated : () => {\r\n        /* return fetch('/users/authenticated')\r\n                .then(res => {\r\n                    if (res.status !== 401){\r\n                        return res.json().then(data => {\r\n                            return data;\r\n                        });\r\n                    }\r\n                    else{\r\n                        return { isAuthenticated : false, user : { username : \"\" } };\r\n                    }\r\n                }); */\r\n        return axios.get('/users/authenticated').then(getResponse).catch(catchErrors);\r\n    },\r\n    changePassword : (resetPasswordToken, password) => {\r\n        return axios.post('/users/changepassword', {resetPasswordToken, password}).then(getResponse).catch(catchErrors);\r\n    } \r\n}","export const PRIMARY = \"#d4dde3\";\r\nexport const SECONDARY = \"#829aab\";\r\nexport const LIGHT = \"#58f258\";\r\nexport const DARK = \"#184166\";","import React from 'react';\r\nimport { Container, Row } from 'react-bootstrap';\r\nimport { BounceLoader } from 'react-spinners';\r\nimport { LIGHT } from '../constants/Colors';\r\n\r\nconst SFLoading = () => {\r\n    return (\r\n        <Container>\r\n            <Row className=\"my-auto d-flex justify-content-center\">\r\n                <h2 className=\"sf-loading-text\"><b>Loading...</b></h2>\r\n            </Row>\r\n            <Row className=\"my-auto d-flex justify-content-center\">\r\n                <BounceLoader color={LIGHT} size=\"5em\"/>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SFLoading;","import React, { useState, useEffect, createContext } from 'react';\r\nimport auth from '../services/authService';\r\n\r\nimport SFLoading from '../components/SFLoading';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport default ({ children }) => {\r\n\r\n    const [user, setUser] = useState(null);\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n    useEffect(() => {\r\n        auth.isAuthenticated().then( (result) => {\r\n            setUser(result.user);\r\n            setIsAuthenticated(result.isAuthenticated);\r\n            setIsLoaded(true);\r\n        });\r\n    }, []);\r\n\r\n    if (!isLoaded){\r\n        return <SFLoading />\r\n    }\r\n    \r\n    return (\r\n        <AuthContext.Provider value={{ user, setUser, isAuthenticated, setIsAuthenticated }}>\r\n            { children }\r\n        </AuthContext.Provider>\r\n    );\r\n}","import React, { useContext } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { AuthContext } from '../context/AuthContext';\r\n\r\nconst PrivateRoute = ({ component : Component, ...rest }) => {\r\n\r\n    const { isAuthenticated } = useContext(AuthContext);\r\n\r\n    return (\r\n        <Route {...rest} render={props => {\r\n            if (!isAuthenticated)\r\n                return <Redirect to={{ pathname : '/admin/login', state : {from : props.location}}} />\r\n            return <Component {...props} />\r\n        }} />\r\n    );\r\n}\r\n\r\nexport default PrivateRoute;","import React, { useContext } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { AuthContext } from '../context/AuthContext';\r\n\r\nconst UnPrivateRoute = ({ component : Component, ...rest }) => {\r\n\r\n    const { isAuthenticated } = useContext(AuthContext);\r\n\r\n    return (\r\n        <Route {...rest} render={props => {\r\n            if (isAuthenticated)\r\n                return <Redirect to={{ pathname : '/admin', state : {from : props.location}}} />\r\n            return <Component {...props} />\r\n        }} />\r\n    );\r\n}\r\n\r\nexport default UnPrivateRoute;","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Navbar, Nav, Image, Row, Col } from 'react-bootstrap';\r\nimport {HouseDoorFill, CalendarDateFill, PeopleFill, EnvelopeFill, List} from 'react-bootstrap-icons';\r\nimport {LIGHT} from '../constants/Colors';\r\n\r\nconst SFNavbar = (props) => {\r\n\r\n    const [expanded, setExpanded] = useState(false);\r\n\r\n    const history = useHistory();\r\n\r\n    const goToHome = () => {\r\n        if (props.admin){\r\n            return;\r\n        }\r\n        history.push('/');\r\n    };\r\n\r\n    const goToSchedule = () => {\r\n        history.push('/schedule');\r\n    };\r\n\r\n    const goToMemberships = () => {\r\n        history.push(\"/memberships\");\r\n    }\r\n\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"primary\" expand=\"sm\" expanded={expanded}>\r\n            <Row>\r\n                <Col xs={8}>\r\n                    <Navbar.Brand>\r\n                        <Image\r\n                            src=\"/sf_logo1.jpg\"\r\n                            className=\"sf-logo-img\"\r\n                            alt=\"Santer Fitness Logo\"\r\n                            rounded\r\n                            onClick={goToHome}\r\n                        />\r\n                    </Navbar.Brand>\r\n                </Col>\r\n                <Col className=\"sf-nav-toggle\">\r\n                    <Navbar.Toggle onClick={() => setExpanded(expanded ? false : \"expanded\")}><List color={LIGHT} size=\"3.25em\"/></Navbar.Toggle>\r\n                </Col>\r\n            </Row>\r\n            <Navbar.Collapse>\r\n                <Nav className=\"justify-content-end\" style={{width:\"100%\"}}>\r\n                    <Nav.Link className=\"sf-nav-link\" onClick={goToHome} disabled={props.admin}><b>Home</b> <HouseDoorFill color={LIGHT} /></Nav.Link>\r\n                    <Nav.Link className=\"sf-nav-link\" onClick={goToSchedule} disabled={props.admin}><b>Classes</b> <CalendarDateFill color={LIGHT} /></Nav.Link>\r\n                    <Nav.Link className=\"sf-nav-link\" onClick={goToMemberships} disabled={props.admin}><b>Memberships</b> <PeopleFill color={LIGHT} /></Nav.Link>\r\n                    <Nav.Link className=\"sf-nav-link\" href=\"#sf-footer\" disabled={props.admin}><b>Contact</b> <EnvelopeFill color={LIGHT} /></Nav.Link>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default SFNavbar;","import React from 'react';\r\nimport { Row, Col, ListGroup } from 'react-bootstrap';\r\nimport { IconContext } from 'react-icons';\r\nimport { AiFillPhone } from 'react-icons/ai';\r\nimport { GrMail } from 'react-icons/gr';\r\nimport { FaBuilding } from 'react-icons/fa';\r\nimport { SocialIcon } from 'react-social-icons';\r\n\r\nconst SFFooter = () => {\r\n\r\n    return(\r\n        <IconContext.Provider value={{className:\"contact-icons\"}}>\r\n            <Col className=\"sf-footer\" id=\"sf-footer\">\r\n                <Row className=\"sf-footer-top\">\r\n                    <Col>\r\n                        <Row className=\"sf-footer-title1\">\r\n                            <Col className=\"d-flex justify-content-start\">\r\n                                <h5><b>Hours</b></h5>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col className=\"d-flex justify-content-start\">\r\n                                <ListGroup className=\"sf-hours-list\">\r\n                                    <ListGroup.Item className=\"sf-hours-list-item\">\r\n                                        <b>Sunday</b><br/>7:00am - 5:00pm\r\n                                    </ListGroup.Item>\r\n                                    <ListGroup.Item className=\"sf-hours-list-item\">\r\n                                        <b>Monday</b><br/>5:00am - 10:00pm\r\n                                    </ListGroup.Item>\r\n                                    <ListGroup.Item className=\"sf-hours-list-item\">\r\n                                        <b>Tueday</b><br/>5:00am - 10:00pm\r\n                                    </ListGroup.Item>\r\n                                    <ListGroup.Item className=\"sf-hours-list-item\">\r\n                                        <b>Wednesday</b><br/>5:00am - 10:00pm\r\n                                    </ListGroup.Item>\r\n                                    <ListGroup.Item className=\"sf-hours-list-item\">\r\n                                        <b>Thursday</b><br/>5:00am - 10:00pm\r\n                                    </ListGroup.Item>\r\n                                    <ListGroup.Item className=\"sf-hours-list-item\">\r\n                                        <b>Friday</b><br/>5:00am - 9:00pm\r\n                                    </ListGroup.Item>\r\n                                    <ListGroup.Item className=\"sf-hours-list-item\">\r\n                                        <b>Saturday</b><br/>7:00am - 7:00pm\r\n                                    </ListGroup.Item>\r\n                                </ListGroup>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col className=\"sf-footer-info\">\r\n                        <Row className=\"sf-footer-title2 d-flex justify-content-start\">\r\n                            <h5><b>Contact</b></h5>\r\n                        </Row>\r\n                        <Row className=\"d-flex justify-content-start\">\r\n                            <p className=\"sf-contact-info\">\r\n                                <FaBuilding/><br/>\r\n                                Santer Fitness<br/>\r\n                                3 Locust Street<br/>\r\n                                Washingtonville, NY 10992<br/><br/>\r\n                                <AiFillPhone/><br/>\r\n                                (845) 496-9188<br/><br/>\r\n                                <GrMail /><br/>\r\n                                info@santerfitness.com<br/>\r\n                            </p>\r\n                        </Row>\r\n                        <Row className=\"sf-footer-title2 d-flex justify-content-start\">\r\n                            <h5><b>Social Media</b></h5>\r\n                        </Row>\r\n                        <Row className=\"d-flex justify-content-start\" style={{marginBottom: \"1.5em\"}}>\r\n                            <div className=\"sf-contact-info\">\r\n                                <SocialIcon className=\"sf-social-button\" url=\"https://www.facebook.com/Santer-Fitness-227206090662880/?ref_type=bookmark\"/>\r\n                                <SocialIcon className=\"sf-social-button\" url=\"https://twitter.com/santerfitness\" />\r\n                                <SocialIcon className=\"sf-social-button\" url=\"https://www.instagram.com/santerfitness/\" /> \r\n                            </div>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"sf-footer-bottom d-flex justify-content-center\">\r\n                    <p>Copyright © 2020 - Santer Fitness</p>\r\n                </Row>\r\n            </Col>\r\n        </IconContext.Provider>\r\n    );\r\n}\r\n\r\nexport default SFFooter;","import React from 'react';\r\nimport { Card, ListGroup } from 'react-bootstrap';\r\n\r\nconst SFCard = (props) => {\r\n\r\n    let Icon = props.icon;\r\n    let title = props.title;\r\n    let items = props.items;\r\n\r\n    let style=null;\r\n    if (props.style)\r\n        style=props.style;\r\n    const renderIcon = () => {\r\n        if (Icon){\r\n            return (\r\n                <Card.Header className=\"sf-home-card-header\"><Icon /></Card.Header>\r\n            );\r\n        }\r\n    };\r\n\r\n    const renderTitle = () => {\r\n        if (title){\r\n            return (\r\n                <Card.Body className=\"sf-home-card-body\">\r\n                    <Card.Title className=\"sf-home-card-title\">\r\n    <                   b>{title}</b>\r\n                    </Card.Title>\r\n                </Card.Body>\r\n            );\r\n        }\r\n    };\r\n\r\n    const renderItems = () => {\r\n        if (items){\r\n            return (\r\n                <ListGroup  className=\"sf-home-card-text\" variant=\"flush\">\r\n                    {items.map( (item, index) =>\r\n                        <ListGroup.Item key={index}>{item}</ListGroup.Item>\r\n                    )}\r\n                </ListGroup>\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card className=\"sf-home-card text-center\" style={style}>\r\n            {renderIcon()}\r\n            {renderTitle()}\r\n            {renderItems()}\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default SFCard;","import React from 'react';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nconst SFAlert = (props) => {\r\n\r\n    let variant;\r\n    if (props.isEmergency === true){\r\n        variant = \"danger\";\r\n    }\r\n    else {\r\n        variant = \"light\";\r\n    }\r\n\r\n    return (\r\n        <Alert className=\"sf-home-alert\" variant={variant}>\r\n            {props.message}\r\n        </Alert>\r\n    )\r\n}\r\n\r\nexport default SFAlert;","import React from 'react';\r\nimport { Container, Row } from 'react-bootstrap';\r\n\r\nconst SFError = (props) => {\r\n    return (\r\n        <Container>\r\n            <Row className=\"my-auto d-flex justify-content-center\">\r\n                <h2 className=\"sf-loading-text\">{props.error ? props.error.message : \"An unexpected error has occurred\"}</h2>\r\n            </Row>\r\n            <Row className=\"my-auto d-flex justify-content-center\">\r\n                <h4 className=\"sf-loading-text\">Please check back later</h4>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SFError;","import React from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from 'react-apollo-hooks';\r\nimport { Carousel, Row, Col, Image, Button } from 'react-bootstrap';\r\nimport { IconContext } from 'react-icons';\r\nimport { FaRunning } from 'react-icons/fa';\r\nimport { GiWeightLiftingUp, GiMeditation } from 'react-icons/gi';\r\n\r\nimport SFNavbar from './SFNavbar';\r\nimport SFFooter from './SFFooter';\r\nimport SFCard from './SFCard';\r\nimport SFAlert from './SFAlert';\r\nimport SFLoading from './SFLoading';\r\nimport SFError from './SFError';\r\n\r\nconst GET_HOME = gql`\r\n    query{\r\n        getAllSlides{\r\n            _id\r\n            key\r\n            url\r\n            lastModifiedBy\r\n        }\r\n        getAllAlerts{\r\n            _id\r\n            message\r\n            isActive\r\n            isEmergency\r\n            lastModifiedBy\r\n        }\r\n    }\r\n`;\r\n\r\nconst HomeScreen = (props) => {\r\n\r\n    var { data, loading, error } = useQuery(GET_HOME);\r\n\r\n    if (props.admin){\r\n        data = props.admin.data;\r\n        loading = props.admin.loading;\r\n        error = props.admin.error;  \r\n    }\r\n\r\n    if (loading ){\r\n        return <SFLoading />\r\n    }\r\n    if (error) {\r\n        return <SFError error={error}/>\r\n    }\r\n\r\n    const handleAlertClick = () => {\r\n        window.open(\"https://mobile-text-alerts.com/subscribe/SanterFitness\", \"_blank\");\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <SFNavbar admin={props.admin} />\r\n            {data.getAllAlerts.filter( (alert) => alert.isActive ).map((alert, index) => \r\n                <SFAlert key={index} message={alert.message} isEmergency={alert.isEmergency} />\r\n            )}\r\n            {data.getAllSlides ?\r\n                <Carousel>\r\n                    {data.getAllSlides.map((slide) => \r\n                        <Carousel.Item key={slide.key}>\r\n                            <Image\r\n                                src={slide.url}\r\n                                alt={slide.key}\r\n                                className=\"d-block w-100 sf-home-slide\"\r\n                            />\r\n                        </Carousel.Item>\r\n                    )}\r\n                </Carousel>\r\n            : null}\r\n            <Row className=\"sf-home-row2 d-flex justify-content-center\" style={{padding:\".5em\", textAlign:\"center\"}}>\r\n                <h4 className=\"sf-home-header\">\r\n                    <b>Sign up for Alerts and Notifications!</b>\r\n                </h4>\r\n            </Row>\r\n            <Row className=\"sf-home-row1 d-flex justify-content-center\">\r\n                <Button className=\"sf-home-button\" variant=\"dark\" size=\"lg\" block onClick={handleAlertClick}>Sign Up</Button>\r\n            </Row>\r\n            <Row className=\"sf-home-row2 d-flex justify-content-center\" style={{padding: \".5em\", textAlign:\"center\"}}>\r\n                <h4 className=\"sf-home-header\">\r\n                    <b>Our Goals</b>\r\n                </h4>\r\n            </Row>\r\n            <Row className=\"sf-home-row1\" xs={1} sm={3} style={{paddingBottom:\"2em\"}}>\r\n                <IconContext.Provider value={{className:\"fitness-icons\", size:64}}>\r\n                    <Col className=\"d-flex justify-content-center\">\r\n                        <SFCard\r\n                            icon={FaRunning}\r\n                            title=\"Endurance\"\r\n                            items={[\r\n                                \"Placeholder 1\", \r\n                                \"Placeholder 2\"\r\n                            ]}\r\n                        />\r\n                    </Col>\r\n                    <Col className=\"d-flex justify-content-center\">\r\n                        <SFCard\r\n                            icon={GiMeditation}\r\n                            title=\"Health\"\r\n                            items={[\r\n                                \"Placeholder 1\", \r\n                                \"Placeholder 2\"\r\n                            ]}\r\n                        />\r\n                    </Col>\r\n                    <Col className=\"d-flex justify-content-center\">\r\n                        <SFCard\r\n                            icon={GiWeightLiftingUp}\r\n                            title=\"Strength\"\r\n                            items={[\r\n                                \"Placeholder 1\", \r\n                                \"Placeholder 2\"\r\n                            ]}\r\n                        />\r\n                    </Col>\r\n                </IconContext.Provider>\r\n            </Row>\r\n            <Row className=\"sf-home-row1\">\r\n                <h3 className=\"sf-home-header\">\r\n                    <b>Santer Fitness</b>\r\n                </h3>\r\n            </Row>\r\n            <Row className=\"sf-home-row1\">\r\n                <p className=\"sf-home-body\">\r\n                    This is the about section.\r\n                </p>\r\n            </Row>\r\n            <SFFooter />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomeScreen;","import React from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from 'react-apollo-hooks';\r\nimport { Row, Col, Image } from 'react-bootstrap';\r\n\r\nimport SFNavbar from './SFNavbar';\r\nimport SFFooter from './SFFooter';\r\nimport SFLoading from './SFLoading';\r\nimport SFError from './SFError';\r\n\r\nconst GET_SCHEDULE = gql`\r\n    query{\r\n        getSchedule{\r\n            _id\r\n            key\r\n            url\r\n            lastModifiedBy\r\n        }\r\n        getAllEvents{\r\n            _id\r\n            name\r\n            description\r\n            instructors\r\n            lastModifiedBy\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nconst ScheduleScreen = (props) => {\r\n\r\n    var { data, loading, error } = useQuery(GET_SCHEDULE);\r\n\r\n    if (props.admin){\r\n        data = props.admin.data;\r\n        loading = props.admin.loading;\r\n        error = props.admin.error;\r\n    }\r\n\r\n    if (loading)\r\n        return <SFLoading />;\r\n    if (error)\r\n        return <SFError />;\r\n\r\n    const getInstructorString = (instructors) => {\r\n        let result = \"\";\r\n        for (let i = 0; i < instructors.length; i++){\r\n            if (i === instructors.length - 1){\r\n                result += instructors[i];\r\n            }\r\n            else {\r\n                result += instructors[i] + \", \";\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <SFNavbar admin={props.admin} />\r\n            <Row className=\"sf-home-row2\">\r\n                <Col className=\"d-flex justify-content-center\">\r\n                    <h3 className=\"sf-member-header\"><b>Class Schedule</b></h3>    \r\n                </Col>\r\n            </Row>\r\n            <Row className=\"sf-home-row1\">\r\n                <Col className=\"d-flex justify-content-center\">\r\n                    {data.getSchedule ? \r\n                        <Image\r\n                            className=\"sf-schedule-img\"\r\n                            key={data.getSchedule.key}\r\n                            src={data.getSchedule.url}\r\n                            alt=\"Class Schedule\"\r\n                        /> \r\n                    : \r\n                        <h5 className=\"sf-member-header\">Schedule not found</h5>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n            {/* <Row className=\"sf-home-row1\">\r\n                <Col className=\"d-flex justify-content-center\">\r\n                    <Button className=\"sf-schedule-button\" block size=\"lg\" variant=\"dark\" onClick={handleDownload}>Download Schedule</Button>\r\n                </Col>\r\n            </Row> */}\r\n            <Row className=\"sf-home-row2\">\r\n                <Col className=\"d-flex justify-content-center\">\r\n                    <h3 className=\"sf-member-header\"><b>Class Info</b></h3>    \r\n                </Col>\r\n            </Row>\r\n            {data.getAllEvents.map( (event, index) =>\r\n                <div className=\"sf-event\" key={index}>\r\n                    <Row className=\"sf-home-row1\">\r\n                        <h3 className=\"sf-home-header\" style={{paddingTop:(index===0 ? \".5em\" : \"0em\")}}>\r\n                            <b>{event.name}</b>\r\n                        </h3>\r\n                    </Row>\r\n                    <Row className=\"sf-home-row1\">\r\n                        <h6 className=\"sf-home-subheader\"><b>Instructor(s): {getInstructorString(event.instructors)}</b></h6>\r\n                    </Row>\r\n                    <Row className=\"sf-home-row1\" style={{paddingBottom:\"-2em\"}}>\r\n                        <p className=\"sf-home-body\">\r\n                            {event.description}\r\n                        </p>\r\n                    </Row>\r\n                </div>\r\n            )}\r\n            <SFFooter />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ScheduleScreen;","import axios from 'axios';\r\n\r\nconst getResponse = (res) => {\r\n    return res.data;\r\n}\r\n\r\nconst catchErrors = (err) => {\r\n    if (err.response.status !== 401){\r\n        return err.response.data;\r\n    }\r\n    else {\r\n        return { message : { msgBody : \"Your session has expired. Please re-login.\", msgError: true } };\r\n    }\r\n}\r\n\r\nexport default {\r\n    addSlide : (data) => {\r\n        return axios.post('/api/add/slide', data).then(getResponse).catch(catchErrors);\r\n    },\r\n    addSchedule : (data) => {\r\n        return axios.post('/api/add/schedule', data).then(getResponse).catch(catchErrors);\r\n    },\r\n    addAlert : (data) => {\r\n        return axios.post('/api/add/alert', data).then(getResponse).catch(catchErrors);\r\n    },\r\n    addEvent : (data) => {\r\n        return axios.post('/api/add/event', data).then(getResponse).catch(catchErrors);\r\n    },\r\n    removeSlide : (key) => {\r\n        return axios.get('/api/remove/slide/' + key).then(getResponse).catch(catchErrors);\r\n    },\r\n    removeSchedule : () => {\r\n        return axios.get('/api/remove/schedule').then(getResponse).catch(catchErrors);\r\n    },\r\n    removeAlert : (id) => {\r\n        return axios.get('/api/remove/alert/' + id).then(getResponse).catch(catchErrors);\r\n    },\r\n    removeEvent : (id) => {\r\n        return axios.get('/api/remove/event/' + id).then(getResponse).catch(catchErrors);\r\n    },\r\n    updateAlert : (id, data) => {\r\n        return axios.post('/api/update/alert/' + id, data).then(getResponse).catch(catchErrors);\r\n    },\r\n    updateEvent : (id, data) => {\r\n        return axios.post('/api/update/event/' + id, data).then(getResponse).catch(catchErrors);\r\n    },\r\n    requestTrial : (data) => {\r\n        return axios.post('/api/trial', data).then(getResponse).catch(catchErrors);\r\n    }\r\n}","import React from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\nimport { DARK } from '../constants/Colors';\r\n\r\nconst SFModal = (props) => {\r\n\r\n    return (\r\n        <Modal show={props.show} onHide={props.onHide} className=\"sf-modal\">\r\n            <Modal.Header className=\"sf-modal-header\" closeButton>\r\n                <Modal.Title className=\"sf-modal-title\" style={{color:(props.message.msgError ? \"red\" : DARK)}}>\r\n                    <b>{props.message.msgError ? \"Error\" : \"\"}</b>\r\n                    <b>{!props.message.msgError && props.message.msgBody.trim() !== '' ? \"Success\" : \"\"}</b>\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className=\"sf-modal-body\">\r\n                    {props.message.msgBody}\r\n            </Modal.Body>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default SFModal;","import React, { useState } from 'react';\r\nimport { Row, Form, Button } from 'react-bootstrap';\r\nimport api from '../services/apiService';\r\nimport SFModal from './SFModal';\r\n\r\nconst SFForm = () => {\r\n\r\n    const [form, setForm] = useState({\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        phone: \"\"\r\n    });\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const [message, setMessage] = useState({\r\n        msgBody: \"\",\r\n        msgError: false\r\n    });\r\n\r\n    const handleClose = () => {\r\n        setShow(false);\r\n        setMessage({\r\n            msgBody: \"\",\r\n            msgError: false\r\n        });\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        const value = event.target.value;\r\n        const name = event.target.name;\r\n        setForm({\r\n            ...form,\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        api.requestTrial({\r\n            firstName: form.firstName,\r\n            lastName: form.lastName,\r\n            email: form.email,\r\n            phone: form.phone\r\n        }).then( (result) => {\r\n            setMessage(result.message);\r\n            setShow(true);\r\n            setForm({\r\n                firstName: \"\",\r\n                lastName: \"\",\r\n                email: \"\",\r\n                phone: \"\"\r\n            });\r\n        });\r\n    }\r\n\r\n    const phoneregex = /^\\(?([0-9]{3})\\)?([0-9]{3})([0-9]{4})$/;\r\n    const emailregex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    let isDisabled = false;\r\n    if (form.firstName.trim() === \"\" || form.lastName.trim() === \"\" || form.email.trim() === \"\" || form.phone.trim() === \"\" || !phoneregex.test(form.phone) || !emailregex.test(form.email))\r\n        isDisabled= true;\r\n\r\n    return (\r\n        <Row className=\"sf-home-row1 d-flex justify-content-center\">\r\n            <Form className=\"sf-home-form\" onSubmit={handleSubmit}>\r\n                <Form.Group controlId=\"firstName\">\r\n                    <Form.Label>First Name:</Form.Label>\r\n                    <Form.Control name=\"firstName\" type=\"text\" value={form.firstName} placeholder=\"Ex. John\" onChange={handleChange}/>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"lastName\">\r\n                    <Form.Label>Last Name:</Form.Label>\r\n                    <Form.Control name=\"lastName\" type=\"text\" value={form.lastName} placeholder=\"Ex. Smith\" onChange={handleChange}/>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"email\">\r\n                    <Form.Label>Email Address:</Form.Label>\r\n                    <Form.Control name=\"email\" type=\"email\" value={form.email} placeholder=\"Ex: info@santerfitness.com\" onChange={handleChange}/>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"phone\">\r\n                    <Form.Label>Phone Number:</Form.Label>\r\n                    <Form.Control name=\"phone\" type=\"text\" value={form.phone} placeholder=\"Ex: 8454969188\" onChange={handleChange}/>\r\n                </Form.Group>\r\n                <div className=\"sf-home-form-button\">\r\n                    <Button type=\"submit\" variant=\"dark\" size=\"lg\" block disabled={isDisabled}>\r\n                        Submit\r\n                    </Button>\r\n                </div>\r\n                <Form.Text className=\"sf-home-form-footer\">\r\n                    After submitting, check in at the front desk by giving your name and showing an ID.<br/>\r\n                    <b>All fields required.</b>\r\n                </Form.Text>\r\n            </Form>\r\n            <SFModal show={show} onHide={handleClose} message={message}/>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default SFForm;","import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\n\r\nimport SFNavbar from './SFNavbar';\r\nimport SFFooter from './SFFooter';\r\nimport SFCard from './SFCard';\r\nimport SFForm from './SFForm';\r\n\r\nconst MembershipsScreen = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <SFNavbar admin={props.admin} />\r\n            <Row className=\"sf-home-row2\">\r\n                <Col className=\"d-flex justify-content-center\">\r\n                    <h3 className=\"sf-member-header\"><b>Memberships</b></h3>    \r\n                </Col>\r\n            </Row>\r\n            <Row className=\"sf-home-row1\">\r\n                <Col className=\"d-flex justify-content-center\">\r\n                    <SFCard\r\n                        title=\"Standard\"\r\n                        items={[\r\n                            \"Free Group Exercise\",\r\n                            \"Free Private Fitness Orientation\",\r\n                            \"Free Childcare\",\r\n                            \"Nutritional Counselling\"\r\n                        ]}\r\n                        style={{marginBottom:\"0em\"}}\r\n                    />\r\n                </Col>\r\n                <Col className=\"d-flex justify-content-center\">\r\n                    <SFCard\r\n                        title=\"Student\"\r\n                        items={[\r\n                            \"Free Group Exercise\",\r\n                            \"Free Weights\",\r\n                            \"Seasonal Specials\",\r\n                            \"Guest Passes\",\r\n                        ]}\r\n                        style={{marginBottom:\"0em\"}}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"sf-home-row1\" style={{paddingBottom:\"3em\"}}>\r\n                <Col className=\"d-flex justify-content-center\">\r\n                    <SFCard\r\n                        title=\"Family (2 members)\"\r\n                        items={[\r\n                            \"Free Group Exercise\",\r\n                            \"Free Private Fitness Orientation\",\r\n                            \"Free Childcare\",\r\n                            \"Fit Kid Programs Offered\"\r\n                        ]} \r\n                    />\r\n                </Col>\r\n                <Col className=\"d-flex justify-content-center\">\r\n                    <SFCard\r\n                        title=\"Family (4 members)\"\r\n                        items={[\r\n                            \"Free Group Exercise\",\r\n                            \"Free Private Fitness Orientation\",\r\n                            \"Free Childcare\",\r\n                            \"Fit Kid Programs Offered\"\r\n                        ]} \r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"sf-home-row2\">\r\n                <Col className=\"d-flex justify-content-center\">\r\n                    <h3 className=\"sf-member-header\"><b>Free 7 Day Trial</b></h3>    \r\n                </Col>\r\n            </Row>\r\n            <SFForm />\r\n            <SFFooter />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MembershipsScreen;","import React, { useState, useContext } from 'react';\r\nimport { Container, Row, Form, Button} from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport auth from '../services/authService';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport SFModal from './SFModal';\r\n\r\nconst AdminLoginScreen = () => {\r\n\r\n    const { setUser, setIsAuthenticated } = useContext(AuthContext);\r\n\r\n    const [userInput, setUserInput] = useState({\r\n        username: \"\",\r\n        password: \"\"\r\n    });\r\n\r\n    const [modal, setModal] = useState({\r\n        show: false,\r\n        message: {\r\n            msgBody: \"\",\r\n            msgError: false\r\n        }\r\n    });\r\n\r\n    const handleChange = (event) => {\r\n        setUserInput({\r\n            ...userInput,\r\n            [event.target.name]: event.target.value \r\n        });\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        auth.login(userInput).then( (result) => {\r\n            if (result.isAuthenticated){\r\n                setIsAuthenticated(true);\r\n                setUser(result.user);\r\n            }\r\n            else {\r\n                setModal({\r\n                    show: true,\r\n                    message: result.message\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setModal({\r\n            show: false,\r\n            message: {\r\n                msgBody: \"\",\r\n                msgError: false\r\n            }\r\n        });\r\n    }\r\n\r\n    let btnDisabled = true;\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    if (re.test(userInput.username) && userInput.password.length >= 6)\r\n        btnDisabled = false;\r\n\r\n    return (\r\n        <Container className=\"sf-login-container\">\r\n            <Row className=\"d-flex justify-content-center\">\r\n                <h3><b>Admin Login</b></h3>\r\n            </Row>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Row>\r\n                    <Form.Group style={{width:\"100%\"}}>\r\n                        <Form.Label>Email:</Form.Label>\r\n                        <Form.Control type=\"email\" value={userInput.username} id=\"username\" name=\"username\" onChange={handleChange} />\r\n                    </Form.Group>\r\n                </Row>\r\n                <Row>\r\n                    <Form.Group style={{width:\"100%\"}}>\r\n                        <Form.Label>Password:</Form.Label>\r\n                        <Form.Control type=\"password\" value={userInput.password} id=\"password\" name=\"password\" onChange={handleChange} />\r\n                    </Form.Group>\r\n                </Row>\r\n                <Row className=\"d-flex justify-content-center\" style={{marginBottom:\".5em\"}}>\r\n                    <Button variant=\"dark\" type=\"submit\" size=\"lg\" disabled={btnDisabled}>Login</Button>\r\n                </Row>\r\n                <Row className=\"d-flex justify-content-center\">\r\n                    <Link to=\"/admin/forgot\">Forgot Password?</Link>\r\n                </Row>\r\n            </Form>\r\n            <SFModal show={modal.show} onHide={handleClose} message={modal.message} />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default AdminLoginScreen;","import React, { useState, useContext } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from 'react-apollo-hooks';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Col, Row, Form, Image, Button } from 'react-bootstrap';\r\nimport api from '../services/apiService';\r\nimport auth from '../services/authService';\r\nimport { AuthContext } from '../context/AuthContext';\r\n\r\nimport HomeScreen from './HomeScreen';\r\nimport SFLoading from './SFLoading';\r\nimport SFError from './SFError';\r\nimport SFModal from './SFModal';\r\n\r\nconst GET_HOME = gql`\r\n    query{\r\n        getAllSlides{\r\n            _id\r\n            key\r\n            url\r\n            lastModifiedBy\r\n        }\r\n        getAllAlerts{\r\n            _id\r\n            message\r\n            isActive\r\n            isEmergency\r\n            lastModifiedBy\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nconst AdminHomeScreen = () => {\r\n\r\n    const { setUser, setIsAuthenticated } = useContext(AuthContext);\r\n\r\n    const [message, setMessage] = useState({\r\n        msgBody: \"\",\r\n        msgError: false\r\n    });\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const { data, loading, error, refetch } = useQuery(GET_HOME);\r\n\r\n    const history = useHistory();\r\n\r\n    if (loading) {\r\n        return <SFLoading />\r\n    }\r\n    if (error) {\r\n        return <SFError />\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setShow(false);\r\n        setMessage({\r\n            msgBody: \"\",\r\n            msgError: false\r\n        });\r\n    }\r\n\r\n    const handleDeleteSlide = (key) => {\r\n        api.removeSlide(key).then( (result) => {\r\n            setMessage(result.message);\r\n            setShow(true);\r\n            refetch();\r\n        });\r\n    }\r\n\r\n    const handleAddSlide = (event) => {\r\n        event.preventDefault();\r\n        if(!event.target[0].files[0]){\r\n            return;\r\n        }\r\n        let file = event.target[0].files[0];\r\n        if (!file) {\r\n            return;\r\n        }\r\n        else {\r\n            let formData = new FormData();\r\n            formData.append('image', file);\r\n            api.addSlide(formData).then( (result) => {\r\n                setMessage(result.message);\r\n                setShow(true);\r\n                refetch();\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleUpdateAlert = (event, id) => {\r\n        event.preventDefault();\r\n\r\n        if (event.target.message.value.trim() === '')\r\n            return;\r\n\r\n        let data = {\r\n            message: event.target.message.value,\r\n            isActive: event.target.isActive.checked,\r\n            isEmergency: event.target.isEmergency.checked,\r\n        };\r\n\r\n        api.updateAlert(id, data).then( (result) => {\r\n            setMessage(result.message);\r\n            setShow(true);\r\n            refetch();\r\n        });\r\n    }\r\n\r\n    const handleDeleteAlert = (id) => {\r\n        api.removeAlert(id).then( (result) => {\r\n            setMessage(result.message);\r\n            setShow(true);\r\n            refetch();\r\n        });\r\n    }\r\n\r\n    const handleAddAlert = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (event.target.message.value.trim() === '')\r\n            return;\r\n\r\n        let data = {\r\n            message: event.target.message.value,\r\n            isActive: event.target.isActive.checked,\r\n            isEmergency: event.target.isEmergency.checked\r\n        };\r\n\r\n        api.addAlert(data).then( (result) => {\r\n            setMessage(result.message);\r\n            setShow(true);\r\n            refetch();\r\n        });\r\n    }\r\n\r\n    const goToEditClass = () => {\r\n        history.push(\"/admin/schedule\");\r\n    }\r\n\r\n    const logOut = () => {\r\n        auth.logout().then( (result) => {\r\n            setUser(result.user);\r\n            setIsAuthenticated(result.isAuthenticated);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Row style={{margin:\"0em\"}}>\r\n            <Col className=\"sf-admin-workspace\">\r\n                <div className=\"sf-admin-container\">\r\n                    <Row className=\"d-flex justify-content-end\" style={{paddingBottom:\".5em\"}}>\r\n                        <Button variant=\"danger\" size=\"sm\" className=\"sf-admin-button\" style={{marginTop:\"1em\", marginBottom:\"-1em\"}} onClick={logOut}>Logout</Button>\r\n                    </Row>\r\n                    <Row className=\"d-flex justify-content-end\" style={{paddingBottom:\".5em\"}}>\r\n                        <Button variant=\"info\" size=\"sm\" className=\"sf-admin-button\" style={{marginTop:\"1em\", marginBottom:\"-1em\"}} onClick={goToEditClass}>Edit Class Page</Button>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"d-flex justify-content-center\">\r\n                            <h4 style={{marginTop:\"1em\", marginBottom:\"1em\"}}><b>Manage Slides</b></h4>\r\n                        </Col>\r\n                    </Row>\r\n                    {data.getAllSlides.map( (slide, idx) => \r\n                        <div key={idx}>\r\n                            <Row className=\"d-flex justify-content-center\">\r\n                                <h6>Uploaded by: {slide.lastModifiedBy}</h6>\r\n                            </Row>\r\n                            <Row className=\"d-flex justify-content-center\">\r\n                                <Image\r\n                                    key={slide.key}\r\n                                    src={slide.url}\r\n                                    alt={slide.key}\r\n                                    className=\"sf-admin-slide\"\r\n                                    thumbnail\r\n                                />\r\n                            </Row>\r\n                            <Row>\r\n                                <Button variant=\"danger\" className=\"sf-admin-button\" size=\"lg\" block onClick={() => handleDeleteSlide(slide.key)}>Delete Slide</Button>\r\n                            </Row>\r\n                        </div>\r\n                    )}\r\n                    <Row className=\"d-flex justify-content-center\">\r\n                        <h4><b>Add Slide</b></h4>\r\n                    </Row>\r\n                    <Form onSubmit={handleAddSlide}>\r\n                        <Row className=\"d-flex justify-content-center\">\r\n                            <Form.Group style={{textAlign:\"center\"}}>\r\n                                <Form.File id=\"addSlide\" name=\"addSlide\"/>\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Row>\r\n                            <Button type=\"submit\" variant=\"success\" className=\"sf-admin-button\" size=\"lg\" block>Add Slide</Button>\r\n                        </Row>\r\n                    </Form>\r\n                    <Row className=\"d-flex justify-content-center\">\r\n                        <h4><b>Manage Alerts</b></h4>\r\n                    </Row>\r\n                    {data.getAllAlerts.map( (alert, idx) => \r\n                        <Form key={idx} onSubmit={(event) => handleUpdateAlert(event, alert._id)}>\r\n                            <Row className=\"d-flex justify-content-center\">\r\n                                <Form.Group className=\"sf-admin-textarea\">\r\n                                    <Form.Label>Message (last edited by {alert.lastModifiedBy})</Form.Label>\r\n                                    <Form.Control as=\"textarea\" rows=\"3\" defaultValue={alert.message} id=\"message\" name=\"message\"/>\r\n                                </Form.Group>\r\n                            </Row>\r\n                            <Row className=\"d-flex justify-content-center\">\r\n                                <Form.Group>\r\n                                    <Form.Check label=\"Active?\" type=\"checkbox\" defaultChecked={alert.isActive} name=\"isActive\" id=\"isActive\" inline />\r\n                                    <Form.Check label=\"Urgent? (Red)\" type=\"checkbox\" defaultChecked={alert.isEmergency} name=\"isEmergency\" id=\"isEmergency\" inline />\r\n                                </Form.Group>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col className=\"d-flex justify-content-center\">\r\n                                    <Button type=\"submit\" variant=\"warning\" className=\"sf-admin-button2\" size=\"lg\">Update Alert</Button>\r\n                                </Col>\r\n                                <Col className=\"d-flex justify-content-center\">\r\n                                    <Button type=\"button\" variant=\"danger\" className=\"sf-admin-button2\" size=\"lg\" onClick={() => handleDeleteAlert(alert._id)}>Delete Alert</Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    )}\r\n                    <Row className=\"d-flex justify-content-center\">\r\n                        <h4><b>Add Alert</b></h4>\r\n                    </Row>\r\n                    <Form onSubmit={handleAddAlert}>\r\n                        <Row className=\"d-flex justify-content-center\">\r\n                            <Form.Group className=\"sf-admin-textarea\">\r\n                                <Form.Label>Message</Form.Label>\r\n                                <Form.Control as=\"textarea\" rows=\"3\" defaultValue=\"\" id=\"message\" name=\"message\"/>\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Row className=\"d-flex justify-content-center\">\r\n                            <Form.Group>\r\n                                <Form.Check label=\"Active?\" type=\"checkbox\" defaultChecked={true} name=\"isActive\" id=\"isActive\" inline />\r\n                                <Form.Check label=\"Urgent? (Red)\" type=\"checkbox\" defaultChecked={false} name=\"isEmergency\" id=\"isEmergency\" inline />\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Row>\r\n                            <Button type=\"submit\" variant=\"success\" className=\"sf-admin-button\" size=\"lg\" block>Add Alert</Button>\r\n                        </Row>\r\n                    </Form>\r\n                    <SFModal show={show} onHide={handleClose} message={message}/>\r\n                </div>   \r\n            </Col>\r\n            <Col className=\"d-none d-lg-block\">\r\n                <HomeScreen admin={{ data, loading, error }}/>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default AdminHomeScreen;","import React, { useState, useContext } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useQuery } from 'react-apollo-hooks';\r\nimport { Col, Row, Container, Form, Image, Button } from 'react-bootstrap';\r\nimport api from '../services/apiService';\r\nimport auth from '../services/authService';\r\nimport { AuthContext } from '../context/AuthContext';\r\n\r\nimport ScheduleScreen from './ScheduleScreen';\r\nimport SFLoading from './SFLoading';\r\nimport SFError from './SFError';\r\nimport SFModal from './SFModal';\r\n\r\nconst GET_SCHEDULE = gql`\r\n    query{\r\n        getSchedule{\r\n            _id\r\n            key\r\n            url\r\n            lastModifiedBy\r\n        }\r\n        getAllEvents{\r\n            _id\r\n            name\r\n            description\r\n            instructors\r\n            lastModifiedBy\r\n        }\r\n    }\r\n`;\r\n\r\nconst AdminScheduleScreen = () => {\r\n\r\n    const { setUser, setIsAuthenticated } = useContext(AuthContext);\r\n\r\n    const [message, setMessage] = useState({\r\n        msgBody: \"\",\r\n        msgError: false\r\n    });\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const { data, loading, error, refetch } = useQuery(GET_SCHEDULE);\r\n\r\n    const history = useHistory();\r\n\r\n    if (loading) {\r\n        return <SFLoading/>\r\n    }\r\n    if (error){\r\n        return <SFError/>\r\n    }\r\n\r\n    const getInstructorString = (instructors) => {\r\n        let result = \"\";\r\n        for (let i = 0; i < instructors.length; i++){\r\n            if (i === instructors.length - 1){\r\n                result += instructors[i];\r\n            }\r\n            else {\r\n                result += instructors[i] + \",\";\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    const getInstructorList = (instructors) => {\r\n        return instructors.split(',').map((inst) => inst.trim());\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setShow(false);\r\n        setMessage({\r\n            msgBody: \"\",\r\n            msgError: false\r\n        });\r\n    }\r\n\r\n    const handleReplaceSchedule = (event) => {\r\n        event.preventDefault();\r\n        if (!event.target[0].files[0]){\r\n            return;\r\n        }\r\n        let file = event.target[0].files[0];\r\n        if (!file) {\r\n            return;\r\n        }\r\n        else {\r\n            let formData = new FormData();\r\n            formData.append('image', file);\r\n            api.addSchedule(formData).then( (result) => {\r\n                setMessage(result.message);\r\n                setShow(true);\r\n                refetch();\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleUpdateEvent = (event, id) => {\r\n        event.preventDefault();\r\n\r\n        if (event.target.name.value.trim() === '' || event.target.description.value.trim() === '' || event.target.instructors.value.trim() === '') {\r\n            return;\r\n        }\r\n\r\n        let data = {\r\n            name: event.target.name.value,\r\n            description: event.target.description.value,\r\n            instructors: getInstructorList(event.target.instructors.value)\r\n        };\r\n\r\n        api.updateEvent(id, data).then( (result) => {\r\n            setMessage(result.message);\r\n            setShow(true);\r\n            refetch();\r\n        });\r\n    }\r\n\r\n    const handleDeleteEvent = (id) => {\r\n        api.removeEvent(id).then( (result) => {\r\n            setMessage(result.message);\r\n            setShow(true);\r\n            refetch();\r\n        });\r\n    }\r\n\r\n    const handleAddEvent = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (event.target.name.value.trim() === '' || event.target.description.value.trim() === '' || event.target.instructors.value.trim() === '') {\r\n            return;\r\n        }\r\n\r\n        let data = {\r\n            name: event.target.name.value,\r\n            description: event.target.description.value,\r\n            instructors: getInstructorList(event.target.instructors.value)\r\n        };\r\n\r\n        api.addEvent(data).then( (result) => {\r\n            setMessage(result.message);\r\n            setShow(true);\r\n            refetch();\r\n        });\r\n    }\r\n\r\n    const goToEditHome = () => {\r\n        history.push('/admin');\r\n    }\r\n\r\n    const logOut = () => {\r\n        auth.logout().then( (result) => {\r\n            setUser(result.user);\r\n            setIsAuthenticated(result.isAuthenticated);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Row style={{margin:\"1em\"}}>\r\n            <Col className=\"sf-admin-workspace\">\r\n                <Container className=\"sf-admin-container\">\r\n                    <Row className=\"d-flex justify-content-end\" style={{paddingBottom:\".5em\"}}>\r\n                        <Button variant=\"danger\" size=\"sm\" className=\"sf-admin-button\" style={{marginTop:\"1em\", marginBottom:\"-1em\"}} onClick={logOut}>Log Out</Button>\r\n                    </Row>\r\n                    <Row className=\"d-flex justify-content-end\" style={{paddingBottom:\".5em\"}}>\r\n                        <Button variant=\"info\" size=\"sm\" className=\"sf-admin-button\" style={{marginTop:\"1em\", marginBottom:\"-1em\"}} onClick={goToEditHome}>Edit Home Page</Button>\r\n                    </Row>\r\n                    <Row className=\"d-flex justify-content-center\">\r\n                        <h4 style={{marginBottom:\"1em\", marginTop:\"1em\"}}><b>Manage Schedule</b></h4>\r\n                    </Row>\r\n                    {data.getSchedule ?\r\n                        <div key=\"schedule.jpg\">\r\n                            <Row className=\"d-flex justify-content-center\">\r\n                                <h6>Uploaded by: {data.getSchedule.lastModifiedBy}</h6>\r\n                            </Row>\r\n                            <Row className=\"d-flex justify-content-center\">\r\n                                <Image \r\n                                    key={data.getSchedule.key}\r\n                                    src={data.getSchedule.url}\r\n                                    alt={data.getSchedule.key}\r\n                                    className=\"sf-admin-slide\"\r\n                                    thumbnail\r\n                                />\r\n                            </Row>\r\n                        </div>\r\n                    :\r\n                        <div key=\"schedule.jpg\">\r\n                            <Row className=\"d-flex justify-content-center\">\r\n                                <h6>No schedule found</h6>\r\n                            </Row>\r\n                        </div>\r\n                    }\r\n                    <Form onSubmit={handleReplaceSchedule}>\r\n                        <Row className=\"d-flex justify-content-center\">\r\n                            <Form.Group style={{textAlign:\"center\", marginTop:\".75em\"}}>\r\n                                <Form.File id=\"replaceSchedule\" name=\"replaceSchedule\"/>\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Row className=\"d-flex justify-content-center\">\r\n                            <Button type=\"submit\" variant=\"success\" className=\"sf-admin-button\" size=\"lg\" block>Replace Schedule</Button>\r\n                        </Row>\r\n                    </Form>\r\n                    <Row className=\"d-flex justify-content-center\">\r\n                        <h4 style={{marginBottom:\"1em\"}}><b>Manage Classes</b></h4>\r\n                    </Row>\r\n                    {data.getAllEvents.map( (event, idx) => \r\n                        <Form key={idx} onSubmit={(event) => handleUpdateEvent(event, event._id)}>\r\n                            <Row className=\"d-flex justify-content-center\">\r\n                                <h6>Last Modified By: {event.lastModifiedBy}</h6>\r\n                            </Row>\r\n                            <Row className=\"d-flex justify-content-center\">\r\n                                <Form.Group className=\"sf-admin-textarea\">\r\n                                    <Form.Label>Name</Form.Label>\r\n                                    <Form.Control as=\"textarea\" rows=\"1\" defaultValue={event.name} id=\"name\" name=\"name\"/>\r\n                                </Form.Group>\r\n                            </Row>\r\n                            <Row className=\"d-flex justify-content-center\">\r\n                                <Form.Group className=\"sf-admin-textarea\">\r\n                                    <Form.Label>Description</Form.Label>\r\n                                    <Form.Control as=\"textarea\" rows=\"3\" defaultValue={event.description} id=\"description\" name=\"description\"/>\r\n                                </Form.Group>\r\n                            </Row>\r\n                            <Row className=\"d-flex justify-content-center\">\r\n                                <Form.Group className=\"sf-admin-textarea\">\r\n                                    <Form.Label>Instructor(s) separated by COMMAS</Form.Label>\r\n                                    <Form.Control as=\"textarea\" rows=\"1\" defaultValue={getInstructorString(event.instructors)} id=\"instructors\" name=\"instructors\"/>\r\n                                </Form.Group>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col className=\"d-flex justify-content-center\">\r\n                                    <Button type=\"submit\" variant=\"warning\" className=\"sf-admin-button2\" size=\"lg\" block>Update Class</Button>\r\n                                </Col>\r\n                                <Col className=\"d-flex justify-content-center\">\r\n                                    <Button type=\"button\" variant=\"danger\" className=\"sf-admin-button2\" size=\"lg\" block onClick={() => handleDeleteEvent(event._id)}>Delete Class</Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    )}\r\n                    <Row className=\"d-flex justify-content-center\">\r\n                        <h4 style={{marginBottom:\"1em\"}}><b>Add Class</b></h4>\r\n                    </Row>\r\n                    <Form onSubmit={handleAddEvent}>\r\n                        <Row className=\"d-flex justify-content-center\">\r\n                            <Form.Group className=\"sf-admin-textarea\">\r\n                                <Form.Label>Name</Form.Label>\r\n                                <Form.Control as=\"textarea\" rows=\"1\" defaultValue=\"\" id=\"name\" name=\"name\"/>\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Row className=\"d-flex justify-content-center\">\r\n                            <Form.Group className=\"sf-admin-textarea\">\r\n                                <Form.Label>Description</Form.Label>\r\n                                <Form.Control as=\"textarea\" rows=\"3\" defaultValue=\"\" id=\"description\" name=\"description\"/>\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Row className=\"d-flex justify-content-center\">\r\n                            <Form.Group className=\"sf-admin-textarea\">\r\n                                <Form.Label>Instructor(s) separated by COMMAS</Form.Label>\r\n                                <Form.Control as=\"textarea\" rows=\"1\" defaultValue=\"\" id=\"instructors\" name=\"instructors\"/>\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Row>\r\n                            <Button type=\"submit\" variant=\"success\" className=\"sf-admin-button\" size=\"lg\" block>Add Class</Button>\r\n                        </Row>\r\n                    </Form>\r\n                    <SFModal show={show} onHide={handleClose} message={message}/>\r\n                </Container>\r\n            </Col>\r\n            <Col className=\"d-none d-lg-block\">\r\n                <ScheduleScreen admin={{ data, loading, error }}/>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default AdminScheduleScreen;","import React, { useState } from 'react';\r\nimport { Container, Row, Form, Button} from 'react-bootstrap';\r\nimport { Link  } from 'react-router-dom';\r\nimport auth from '../services/authService';\r\nimport SFModal from './SFModal';\r\n\r\nconst AdminForgotPasswordScreen = () => {\r\n\r\n    const [userInput, setUserInput] = useState({\r\n        username: \"\"\r\n    });\r\n\r\n    const [modal, setModal] = useState({\r\n        show: false,\r\n        message: {\r\n            msgBody: \"\",\r\n            msgError: false\r\n        }\r\n    });\r\n\r\n    const handleChange = (event) => {\r\n        setUserInput({\r\n            username: event.target.value \r\n        });\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        auth.forgotPassword(userInput).then( (result) => {\r\n            setModal({\r\n                show: true,\r\n                message: result.message\r\n            })\r\n        });\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setModal({\r\n            show: false,\r\n            message: {\r\n                msgBody: \"\",\r\n                msgError: false\r\n            }\r\n        });\r\n    }\r\n\r\n    let btnDisabled = true;\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    if (re.test(userInput.username))\r\n        btnDisabled = false;\r\n\r\n    return (\r\n        <Container className=\"sf-login-container\">\r\n            <Row className=\"d-flex justify-content-center\">\r\n                <h3><b>Password Reset</b></h3>\r\n            </Row>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Row>\r\n                    <Form.Group style={{width:\"100%\"}}>\r\n                        <Form.Label>Email:</Form.Label>\r\n                        <Form.Control type=\"email\" value={userInput.username} id=\"username\" name=\"username\" onChange={handleChange} />\r\n                    </Form.Group>\r\n                </Row>\r\n                <Row className=\"d-flex justify-content-center\" style={{marginBottom:\".5em\"}}>\r\n                    <Button variant=\"dark\" type=\"submit\" size=\"lg\" disabled={btnDisabled}>Send Email</Button>\r\n                </Row>\r\n                <Row className=\"d-flex justify-content-center\">\r\n                    <Link to=\"/admin/login\">Back to Login</Link>\r\n                </Row>\r\n            </Form>\r\n            <SFModal show={modal.show} onHide={handleClose} message={modal.message} />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default AdminForgotPasswordScreen;","import React, { useState } from 'react';\r\nimport { Container, Row, Form, Button} from 'react-bootstrap';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport auth from '../services/authService';\r\nimport SFModal from './SFModal';\r\n\r\nconst AdminChangePasswordScreen = () => {\r\n\r\n    const [userInput, setUserInput] = useState({\r\n        password: \"\",\r\n        confirmPassword: \"\"\r\n    });\r\n\r\n    const [modal, setModal] = useState({\r\n        show: false,\r\n        message: {\r\n            msgBody: \"\",\r\n            msgError: false\r\n        }\r\n    });\r\n\r\n    const { token } = useParams();\r\n\r\n    const handleChange = (event) => {\r\n        setUserInput({\r\n            ...userInput,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        auth.changePassword(token, userInput.password).then( (result) => {\r\n            setModal({\r\n                show: true,\r\n                message: result.message\r\n            });\r\n        });\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setModal({\r\n            show: false,\r\n            message: {\r\n                msgBody: \"\",\r\n                msgError: false\r\n            }\r\n        });\r\n    }\r\n\r\n    let btnDisabled = true;\r\n    if (userInput.password === userInput.confirmPassword && userInput.confirmPassword.length >= 6 && userInput.password.length >= 6)\r\n        btnDisabled = false;\r\n\r\n    return (\r\n        <Container className=\"sf-login-container\">\r\n            <Row className=\"d-flex justify-content-center\">\r\n                <h3><b>Password Reset</b></h3>\r\n            </Row>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Row>\r\n                    <Form.Group style={{width:\"100%\"}}>\r\n                        <Form.Label>New Password:</Form.Label>\r\n                        <Form.Control type=\"password\" value={userInput.password} id=\"password\" name=\"password\" onChange={handleChange} />\r\n                    </Form.Group>\r\n                </Row>\r\n                <Row>\r\n                    <Form.Group style={{width:\"100%\"}}>\r\n                        <Form.Label>Confirm New Password:</Form.Label>\r\n                        <Form.Control type=\"password\" value={userInput.confirmPassword} id=\"confirmPassword\" name=\"confirmPassword\" onChange={handleChange} />\r\n                    </Form.Group>\r\n                </Row>\r\n                <Row className=\"d-flex justify-content-center\" style={{marginBottom:\".5em\"}}>\r\n                    <Button variant=\"dark\" type=\"submit\" size=\"lg\" disabled={btnDisabled}>Change Password</Button>\r\n                </Row>\r\n                <Row className=\"d-flex justify-content-center\">\r\n                    <Link to=\"/admin/login\">Back to Login</Link>\r\n                </Row>\r\n            </Form>\r\n            <SFModal show={modal.show} onHide={handleClose} message={modal.message} />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default AdminChangePasswordScreen;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloProvider as ApolloHooksProvider } from 'react-apollo-hooks';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './css/main.css';\nimport * as serviceWorker from './services/serviceWorker';\nimport AuthProvider from './context/AuthContext';\nimport PrivateRoute from './hocs/PrivateRoute';\nimport UnPrivateRoute from './hocs/UnPrivateRoute';\n\nimport HomeScreen from './components/HomeScreen';\nimport ScheduleScreen from './components/ScheduleScreen';\nimport MembershipsScreen from './components/MembershipsScreen';\nimport AdminLoginScreen from './components/AdminLoginScreen';\nimport AdminHomeScreen from './components/AdminHomeScreen';\nimport AdminScheduleScreen from './components/AdminScheduleScreen';\nimport AdminForgotPasswordScreen from './components/AdminForgotPasswordScreen';\nimport AdminChangePasswordScreen from './components/AdminChangePasswordScreen';\n\nconst client = new ApolloClient({ uri: \"http://localhost:5000/graphql\" });\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ApolloHooksProvider client={client}>\n      <AuthProvider>\n        <Router>\n          <Route exact path='/' component={HomeScreen} />\n          <Route path='/schedule' component={ScheduleScreen} />\n          <Route path='/memberships' component={MembershipsScreen} />\n          <PrivateRoute exact path='/admin' component={AdminHomeScreen} />\n          <PrivateRoute path='/admin/schedule' component={AdminScheduleScreen} />\n          <UnPrivateRoute path='/admin/login' component={AdminLoginScreen} />\n          <UnPrivateRoute path='/admin/forgot' component={AdminForgotPasswordScreen} />\n          <UnPrivateRoute path='/admin/reset/:token' component={AdminChangePasswordScreen} />\n        </Router>\n      </AuthProvider>\n    </ApolloHooksProvider>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}